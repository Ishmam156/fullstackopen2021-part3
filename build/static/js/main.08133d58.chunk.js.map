{"version":3,"sources":["services/entries.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newEntry","post","entryID","delete","put","Notification","message","messageType","className","Persons","item","persons","setPersons","name","number","onClick","id","window","confirm","bookService","filter","person","Display","title","PersonForm","props","onSubmit","onChange","onChangeName","value","nameValue","onChangeNumber","numberValue","type","Filter","onSearchChange","searchValue","App","useState","newName","setNewName","newNumber","setNewNumber","newSearch","setnewSearch","showAll","setShowAll","sucessMessage","setSucessMessage","setMessageType","personToShow","toLowerCase","includes","useEffect","event","target","preventDefault","map","updateEntry","find","updatedEntry","returnEntry","setTimeout","catch","error","concat","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08133d58.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n// const baseUrl = 'http://localhost:3001/api/persons'\n\nconst getEntries = () => {\n    const allEntries = axios.get(baseUrl)\n    return allEntries.then(response => response.data)\n}\n\nconst addEntry = newEntry => {\n    const addedEntry = axios.post(baseUrl, newEntry)\n    return addedEntry.then(response => response.data)\n}\n\nconst deleteEntry = entryID => {\n    const deletedEntry = axios.delete(`${baseUrl}/${entryID}`)\n    return deletedEntry.then(response => response)\n}\n\nconst updateEntry = (entryID, newEntry) => {\n    const updatedEntry = axios.put(`${baseUrl}/${entryID}`, newEntry)\n    return updatedEntry.then(response => response.data)\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getEntries, addEntry, deleteEntry, updateEntry }","import React, { useState, useEffect } from 'react'\nimport bookService from './services/entries'\n\nconst Notification = ({ message, messageType }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={messageType}>\n      {message}\n    </div>\n  )\n}\n\nconst Persons = ({ item, persons, setPersons }) => {\n\n  const handleDelete = (id) => {\n    // Checking if delete confirmation and then deleting\n    if (window.confirm(`Do you want to delete ${item.name} from the phone book?`)) {\n      bookService\n        .deleteEntry(id)\n        .then(response => {\n          setPersons(persons.filter(person => person.id !== id))\n        })\n    }\n  }\n  return (\n    <>\n      <p>{item.name} {item.number} <button onClick={() => handleDelete(item.id)}>delete</button></p>\n    </>\n  )\n}\n\nconst Display = ({ title }) => <h2>{title}</h2>\n\nconst PersonForm = (props) => {\n  // Form to handle submission and name check\n  return (\n    <>\n      <form onSubmit={props.onSubmit}>\n        <div>\n          name: <input onChange={props.onChangeName} value={props.nameValue} />\n        </div>\n        <div>\n          number: <input onChange={props.onChangeNumber} value={props.numberValue} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst Filter = (props) => <div>filter shown with <input onChange={props.onSearchChange} value={props.searchValue} /></div>\n\nconst App = () => {\n\n  // Declaring states\n  const [persons, setPersons] = useState([])\n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearch, setnewSearch] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [sucessMessage, setSucessMessage] = useState(null)\n  const [messageType, setMessageType] = useState('sucess')\n\n  // Handling input changes\n  const handleInputChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n\n    setnewSearch(event.target.value)\n\n    if (event.target.value === '') {\n      setShowAll(true)\n    } else {\n      setShowAll(false)\n    }\n  }\n\n  // Filtering for search results\n  const personToShow = showAll ? persons : persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()))\n\n  // Function to handle form submission\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    // Check if person is already in the phonebook\n    if (persons.map(person => person.name).includes(newName)) {\n      // Get their current entry\n      const updateEntry = persons.find(person => person.name === newName)\n      // Checking if user wants to overwrite with new number\n      if (window.confirm(`${newName} is already added in the phonebook. Do you want to replace the old number with the new?`)) {\n        // Update entry and do a PUT request\n        const updatedEntry = { ...updateEntry, number: newNumber }\n        bookService\n          .updateEntry(updateEntry.id, updatedEntry)\n          .then(returnEntry => {\n            setPersons(persons.map(person => person.id !== updateEntry.id ? person : returnEntry))\n\n            setMessageType('sucess')\n            setSucessMessage(`Updated ${newName}'s phone number.`)\n            setTimeout(() => setSucessMessage(null), 5000)\n          })\n          .catch(error => {\n            setMessageType('failure')\n            if (error.response.data.error.includes('number')) {\n              setSucessMessage(`Number needs to be greater than 8 characters.`)\n            } else {\n              setSucessMessage(`Information of ${newName} has already been removed from the server.`)\n            }\n            setNewName('')\n            setNewNumber('')\n            setTimeout(() => setSucessMessage(null), 5000)\n          })\n      }\n    } else {\n      // Add new entry if person not in phonebook\n      const newBook = {\n        name: newName,\n        number: newNumber\n      }\n\n      bookService\n        .addEntry(newBook)\n        .then(returnEntry => {\n          setPersons(persons.concat(returnEntry))\n          setMessageType('sucess')\n          setSucessMessage(`Added ${newName}.`)\n          setTimeout(() => setSucessMessage(null), 5000)\n\n        })\n        .catch(error => {\n          let errorMessage = error.response.data\n          setMessageType('failure')\n\n          if (errorMessage.error.includes('number') && errorMessage.error.includes('name')) {\n            setSucessMessage(`Name needs to be greater than 3 characters and Number needs to be greater than 8 characters.`)\n          } else if (errorMessage.error.includes('number')) {\n            setSucessMessage(`Number needs to be greater than 8 characters.`)\n          } else {\n            setSucessMessage(`Name needs to be greater than 3  characters.`)\n          }\n\n          setTimeout(() => setSucessMessage(null), 5000)\n        })\n\n    }\n    // Reset input field\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Fetch data from server initially\n  useEffect(() => {\n\n    bookService\n      .getEntries()\n      .then(response =>\n        setPersons(response))\n\n  }, [])\n\n  return (\n    <div>\n      <Display title='Phonebook' />\n      <Notification message={sucessMessage} messageType={messageType} />\n      <Filter onSearchChange={handleSearchChange} searchValue={newSearch} />\n      <Display title='Add a new' />\n      <PersonForm onChangeName={handleInputChange} onChangeNumber={handleNumberChange} nameValue={newName} numberValue={newNumber} onSubmit={handleSubmit} />\n      <Display title='Numbers' />\n      {personToShow.map(person =>\n        <Persons key={person.name} item={person} persons={persons} setPersons={setPersons} />\n      )}\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}